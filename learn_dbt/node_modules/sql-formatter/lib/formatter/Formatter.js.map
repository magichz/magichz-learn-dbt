{"version":3,"file":"Formatter.js","names":["indentString","Params","createParser","formatCommaPositions","formatAliasPositions","ExpressionFormatter","Layout","WS","Indentation","Formatter","constructor","cfg","params","tokenizer","Error","cachedTokenizer","cls","formatOptions","format","query","ast","parse","formattedQuery","formatAst","finalQuery","postFormat","trimEnd","paramTypes","statements","map","stat","formatStatement","join","repeat","linesBetweenQueries","statement","layout","dialectCfg","children","hasSemicolon","newlineBeforeSemicolon","add","NEWLINE","NO_NEWLINE","toString","tabulateAlias","commaPosition"],"sources":["../../src/formatter/Formatter.ts"],"sourcesContent":["import { FormatOptions } from '../FormatOptions.js';\nimport { indentString } from './config.js';\nimport Params from './Params.js';\nimport Tokenizer from '../lexer/Tokenizer.js';\n\nimport { createParser } from '../parser/createParser.js';\nimport { StatementNode } from '../parser/ast.js';\n\nimport formatCommaPositions from './formatCommaPositions.js';\nimport formatAliasPositions from './formatAliasPositions.js';\nimport ExpressionFormatter, { DialectFormatOptions } from './ExpressionFormatter.js';\nimport Layout, { WS } from './Layout.js';\nimport Indentation from './Indentation.js';\n\n/** Main formatter class that produces a final output string from list of tokens */\nexport default class Formatter {\n  private cfg: FormatOptions;\n  private params: Params;\n\n  constructor(cfg: FormatOptions) {\n    this.cfg = cfg;\n    this.params = new Params(this.cfg.params);\n  }\n\n  /**\n   * SQL Tokenizer for this formatter, provided by subclasses.\n   */\n  protected tokenizer(): Tokenizer {\n    throw new Error('tokenizer() not implemented by subclass');\n  }\n\n  // Cache the tokenizer for each class (each SQL dialect)\n  // So we wouldn't need to recreate the tokenizer, which is kinda expensive,\n  // for each call to format() function.\n  private cachedTokenizer(): Tokenizer {\n    const cls: Function & { cachedTokenizer?: Tokenizer } = this.constructor;\n    if (!cls.cachedTokenizer) {\n      cls.cachedTokenizer = this.tokenizer();\n    }\n    return cls.cachedTokenizer;\n  }\n\n  /**\n   * Dialect-specific formatting configuration, optionally provided by subclass.\n   */\n  protected formatOptions(): DialectFormatOptions {\n    return {};\n  }\n\n  /**\n   * Formats an SQL query.\n   * @param {string} query - The SQL query string to be formatted\n   * @return {string} The formatter query\n   */\n  public format(query: string): string {\n    const ast = this.parse(query);\n    const formattedQuery = this.formatAst(ast);\n    const finalQuery = this.postFormat(formattedQuery);\n\n    return finalQuery.trimEnd();\n  }\n\n  private parse(query: string): StatementNode[] {\n    return createParser(this.cachedTokenizer()).parse(query, this.cfg.paramTypes || {});\n  }\n\n  private formatAst(statements: StatementNode[]): string {\n    return statements\n      .map(stat => this.formatStatement(stat))\n      .join('\\n'.repeat(this.cfg.linesBetweenQueries + 1));\n  }\n\n  private formatStatement(statement: StatementNode): string {\n    const layout = new ExpressionFormatter({\n      cfg: this.cfg,\n      dialectCfg: this.formatOptions(),\n      params: this.params,\n      layout: new Layout(new Indentation(indentString(this.cfg))),\n    }).format(statement.children);\n\n    if (!statement.hasSemicolon) {\n      // do nothing\n    } else if (this.cfg.newlineBeforeSemicolon) {\n      layout.add(WS.NEWLINE, ';');\n    } else {\n      layout.add(WS.NO_NEWLINE, ';');\n    }\n    return layout.toString();\n  }\n\n  private postFormat(query: string): string {\n    if (this.cfg.tabulateAlias) {\n      query = formatAliasPositions(query);\n    }\n    if (this.cfg.commaPosition === 'before' || this.cfg.commaPosition === 'tabular') {\n      query = formatCommaPositions(query, this.cfg.commaPosition, indentString(this.cfg));\n    }\n\n    return query;\n  }\n}\n"],"mappings":"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"}