{"version":3,"file":"plsql.formatter.js","names":["expandPhrases","Formatter","Tokenizer","EOF_TOKEN","isReserved","isToken","TokenType","keywords","functions","reservedSelect","reservedClauses","reservedSetOperations","reservedJoins","reservedPhrases","PlSqlFormatter","tokenizer","supportsXor","reservedKeywords","reservedFunctionNames","stringTypes","quote","prefixes","identTypes","identChars","rest","variableTypes","regex","paramTypes","numbered","named","paramChars","operators","postProcess","formatOptions","alwaysDenseOperators","tokens","previousReservedToken","map","token","SET","BY","type","RESERVED_KEYWORD"],"sources":["../../../src/languages/plsql/plsql.formatter.ts"],"sourcesContent":["import { expandPhrases } from '../../expandPhrases.js';\nimport Formatter from '../../formatter/Formatter.js';\nimport { DialectFormatOptions } from '../../formatter/ExpressionFormatter.js';\nimport Tokenizer from '../../lexer/Tokenizer.js';\nimport { EOF_TOKEN, isReserved, isToken, Token, TokenType } from '../../lexer/token.js';\nimport { keywords } from './plsql.keywords.js';\nimport { functions } from './plsql.functions.js';\n\nconst reservedSelect = expandPhrases(['SELECT [ALL | DISTINCT | UNIQUE]']);\n\nconst reservedClauses = expandPhrases([\n  // queries\n  'WITH',\n  'FROM',\n  'WHERE',\n  'GROUP BY',\n  'HAVING',\n  'PARTITION BY',\n  'ORDER [SIBLINGS] BY',\n  'OFFSET',\n  'FETCH {FIRST | NEXT}',\n  'FOR UPDATE',\n  // Data manipulation\n  // - insert:\n  'INSERT [INTO | ALL INTO]',\n  'VALUES',\n  // - update:\n  'UPDATE [ONLY]',\n  'SET',\n  // - delete:\n  'DELETE FROM [ONLY]',\n  // - truncate:\n  'TRUNCATE TABLE',\n  // - merge:\n  'MERGE [INTO]',\n  'WHEN [NOT] MATCHED [THEN]',\n  'UPDATE SET',\n  // Data definition\n  'CREATE [OR REPLACE] [NO FORCE | FORCE] [EDITIONING | EDITIONABLE | EDITIONABLE EDITIONING | NONEDITIONABLE] VIEW',\n  'CREATE MATERIALIZED VIEW',\n  'CREATE [GLOBAL TEMPORARY | PRIVATE TEMPORARY | SHARDED | DUPLICATED | IMMUTABLE BLOCKCHAIN | BLOCKCHAIN | IMMUTABLE] TABLE',\n  'DROP TABLE',\n  // - alter table:\n  'ALTER TABLE',\n  'ADD',\n  'DROP {COLUMN | UNUSED COLUMNS | COLUMNS CONTINUE}',\n  'MODIFY',\n  'RENAME TO',\n  'RENAME COLUMN',\n\n  // other\n  'BEGIN',\n  'CONNECT BY',\n  'DECLARE',\n  'EXCEPT',\n  'EXCEPTION',\n  'LOOP',\n  'RETURNING',\n  'START WITH',\n  'SET SCHEMA',\n]);\n\nconst reservedSetOperations = expandPhrases(['UNION [ALL]', 'EXCEPT', 'INTERSECT']);\n\nconst reservedJoins = expandPhrases([\n  'JOIN',\n  '{LEFT | RIGHT | FULL} [OUTER] JOIN',\n  '{INNER | CROSS} JOIN',\n  'NATURAL [INNER] JOIN',\n  'NATURAL {LEFT | RIGHT | FULL} [OUTER] JOIN',\n  // non-standard joins\n  '{CROSS | OUTER} APPLY',\n]);\n\nconst reservedPhrases = expandPhrases([\n  'ON {UPDATE | DELETE} [SET NULL]',\n  'ON COMMIT',\n  '{ROWS | RANGE} BETWEEN',\n]);\n\nexport default class PlSqlFormatter extends Formatter {\n  tokenizer() {\n    return new Tokenizer({\n      reservedClauses,\n      reservedSelect,\n      reservedSetOperations,\n      reservedJoins,\n      reservedPhrases,\n      supportsXor: true,\n      reservedKeywords: keywords,\n      reservedFunctionNames: functions,\n      stringTypes: [\n        { quote: \"''-qq\", prefixes: ['N'] },\n        { quote: \"q''\", prefixes: ['N'] },\n      ],\n      // PL/SQL doesn't actually support escaping of quotes in identifiers,\n      // but for the sake of simpler testing we'll support this anyway\n      // as all other SQL dialects with \"identifiers\" do.\n      identTypes: [`\"\"-qq`],\n      identChars: { rest: '$#' },\n      variableTypes: [{ regex: '&{1,2}[A-Za-z][A-Za-z0-9_$#]*' }],\n      paramTypes: { numbered: [':'], named: [':'] },\n      paramChars: {}, // Empty object used on purpose to not allow $ and # chars as specified in identChars\n      operators: [\n        '**',\n        ':=',\n        '%',\n        '~=',\n        '^=',\n        // '..', // Conflicts with float followed by dot (so \"2..3\" gets parsed as [\"2.\", \".\", \"3\"])\n        '>>',\n        '<<',\n        '=>',\n        '@',\n        '||',\n      ],\n      postProcess,\n    });\n  }\n\n  formatOptions(): DialectFormatOptions {\n    return { alwaysDenseOperators: ['@'] };\n  }\n}\n\nfunction postProcess(tokens: Token[]) {\n  let previousReservedToken: Token = EOF_TOKEN;\n\n  return tokens.map(token => {\n    // BY [SET]\n    if (isToken.SET(token) && isToken.BY(previousReservedToken)) {\n      return { ...token, type: TokenType.RESERVED_KEYWORD };\n    }\n\n    if (isReserved(token.type)) {\n      previousReservedToken = token;\n    }\n\n    return token;\n  });\n}\n"],"mappings":"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"}